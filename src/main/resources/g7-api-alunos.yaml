swagger: '2.0'
info:
  description: Student/Subscription API - CSW 2021/1  
  version: 1.0.0
  title: Student and Subscriptions routes
  # put the contact info for your development or API team
  contact:
    email: eduardo.dornelles@edu.pucrs.br

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: students
  description: Student calls
- name: subscriptions
  description: Subscription calls

paths:
  /students:
    post:
      tags:
      - students
      summary: add an student
      operationId: addStudent
      description: Adds an student to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: addStudentDTO
        description: Student item to add
        schema:
          $ref: '#/definitions/AddStudentDTO'
      responses:
        201:
          description: student created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
    put:
      tags:
      - students
      summary: Update an existing student
      operationId: updateStudent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Student object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/EditStudentDTO'
      responses:
        400:
          description: Invalid id supplied
        404:
          description: Student not found
        405:
          description: Validation exception
    patch:
      tags:
      - students
      summary: Update some attributes of an existing student
      operationId: updatePartialStudent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Student object that needs to be updated
        required: true
        schema:
          $ref: '#/definitions/UpdateStudentDTO'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Student not found
        405:
          description: Validation exception
    get:
      tags:
      - students
      summary: search students
      operationId: searchStudents
      description: |
        By passing in the appropriate options, you can search for
        available student in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: name
        description: pass an optional search string for looking up student by name
        required: false
        type: string
      - in: query
        name: cpf
        description: pass an optional search string for looking up student by cpf (format '99999999999')
        required: false
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/StudentDTO'
        400:
          description: bad input parameter
  /students/{studentId}:
    get:
      tags:
      - students
      summary: find student by id
      description: return student data
      produces:
      - application/json
      parameters:
      - name: studentId
        in: path
        description: student id to search
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/StudentDTO'
        400:
          description: Invalid Id supplied
        404:
          description: Student not found
    delete:
      tags:
      - students
      summary: delete an student by id
      produces:
      - application/json
      parameters:
      - name: studentId
        in: path
        description: Student id to delete
        required: true
        type: integer
        format: int32
      responses:
        400:
          description: Invalid id supplied
        404:
          description: Student not found
        200:
          description: successful operation
  /students/{studentId}/subscriptions:
    get:
      tags:
      - students
      summary: find subscription by student id
      description: return student subscriptions
      produces:
      - application/json
      parameters:
      - name: studentId
        in: path
        description: student id to search
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/SubscriptionDTO'
        400:
          description: Invalid Id supplied
        404:
          description: Student id invalid
  /subscriptions:
    post:
      tags:
      - subscriptions
      summary: add subscription
      operationId: addSubscription
      description: Adds an subscription to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: inventoryItem
        description: Student item to add
        schema:
          $ref: '#/definitions/AddSubscriptionDTO'
      responses:
        201:
          description: student created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
    put:
      tags:
      - subscriptions
      summary: Update existing subscription
      operationId: updateSubscription
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Subscription object that needs to be updated on the store
        required: true
        schema:
          $ref: '#/definitions/EditSubscriptionDTO'
      responses:
        400:
          description: Invalid id supplied
        404:
          description: Subscription not found
        405:
          description: Validation exception
    patch:
      tags:
      - subscriptions
      summary: Update some attributes of an existing subscription
      operationId: updatePartialSubscription
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: subscription object that needs to be updated
        required: true
        schema:
          $ref: '#/definitions/UpdateSubscriptionDTO'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Subscription not found
        405:
          description: Validation exception
    get:
      tags:
      - subscriptions
      summary: search subscriptions
      operationId: searchSubscriptions
      description: |
        By passing in the appropriate options, you can search for
        available subscriptions in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: studentId
        description: pass an optional search string for looking up subscriptions by student id
        required: false
        type: number
      - in: query
        name: editionId
        description: pass an optional search string for looking up subscriptions by edition id
        required: false
        type: number
      - in: query
        name: code
        description: pass an optional search string for looking up subscriptions by code
        required: false
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/SubscriptionDTO'
        400:
          description: bad input parameter
  /subscriptions/{subscriptionId}:
    get:
      tags:
      - subscriptions
      summary: find subscription by id
      description: return subscription data
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: subscription id to search
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/SubscriptionDTO'
        400:
          description: Invalid Id supplied
        404:
          description: subscription not found
    delete:
      tags:
      - subscriptions
      summary: delete an subscription by id
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: subscription id to delete
        required: true
        type: integer
        format: int32
      responses:
        400:
          description: Invalid id supplied
        404:
          description: subscription not found
        200:
          description: successful operation
  /subscriptions/{subscriptionId}/tests:
    get:
      tags:
      - subscriptions
      summary: find tests by subscription Id
      description: return tests by an subscription
      produces:
      - application/json
      parameters:
      - name: subscriptionId
        in: path
        description: subscription id to search
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TestDTO'
        400:
          description: Invalid Id supplied
        404:
          description: Subscription id invalid
definitions:
  StudentDTO:
    type: object
    required:
    - studentId
    - cpf
    - name
    - birthDate
    - address
    - subscriptions
    properties:
      studentId:
        type: integer
        format: int32
        example: 101
      cpf:
        type: string
        example: 9999999999
      name:
        type: string
        example: João da Silva
      address:
        type: string
        example: Rua abcdefgs
      birthDate:
        type: string
        format: date-time
        example: '2016-08-29T09:12:33.001Z'
      subscriptions:
        type: array
        items:
         $ref: '#/definitions/SubscriptionDTO'
  AddStudentDTO:
    type: object
    required:
    - cpf
    - name
    - birthDate
    - address
    properties:
      cpf:
        type: string
        example: 9999999999
      name:
        type: string
        example: João da Silva
      address:
        type: string
        example: Rua abcdefgs
      birthDate:
        type: string
        format: date-time
        example: '2016-08-29T09:12:33.001Z'
  UpdateStudentDTO:
    type: object
    required:
    - studentId
    - cpf
    - name
    - birthDate
    - address
    properties:
      studentId:
        type: integer
        format: int32
        example: 101
      cpf:
        type: string
        example: 9999999999
      name:
        type: string
        example: João da Silva
      address:
        type: string
        example: Rua abcdefgs
      birthDate:
        type: string
        format: date-time
        example: '2016-08-29T09:12:33.001Z'
  EditStudentDTO:
    type: object
    required:
    - studentId
    - cpf
    - name
    - birthDate
    - address
    properties:
      studentId:
        type: integer
        format: int32
        example: 101
      cpf:
        type: string
        example: 9999999999
      name:
        type: string
        example: João da Silva
      address:
        type: string
        example: Rua abcdefgs
      birthDate:
        type: string
        format: date-time
        example: '2016-08-29T09:12:33.001Z'
  SubscriptionDTO:
    type: object
    required:
    - subscriptionId
    - code
    - student
    - edition
    - tests
    properties:
      subscriptionId:
          type: integer
          format: int32
          example: 101
      code:
          type: string
          example: 101
      studentId:
          type: integer
          format: int32
          example: 101
      editionId:
          type: string
          format: int32
          example: 101
      tests:
          type: array
          items:
           $ref: '#/definitions/TestDTO'
  AddSubscriptionDTO:
    type: object
    required:
    - code
    - student
    - edition
    properties:
      code:
          type: string
          example: 101
      studentId:
          type: integer
          format: int32
          example: 101
      editionId:
          type: string
          format: int32
          example: 101
  UpdateSubscriptionDTO:
    type: object
    required:
    - subscriptionId
    - code
    - student
    - edition
    properties:
      subscriptionId:
          type: integer
          format: int32
          example: 101
      code:
          type: string
          example: 101
      studentId:
          type: integer
          format: int32
          example: 101
      editionId:
          type: string
          format: int32
          example: 101
  EditSubscriptionDTO:
    type: object
    required:
    - subscriptionId
    - code
    - student
    - edition
    properties:
      subscriptionId:
          type: integer
          format: int32
          example: 101
      code:
          type: string
          example: 101
      studentId:
          type: integer
          format: int32
          example: 101
      editionId:
          type: string
          format: int32
          example: 101
  TestDTO:
    type: object
    required:
    - testId
    properties:
      testId:
          type: integer
          format: int32
          example: 101
# Added by API Auto Mocking Plugin
host: localhost:8080
basePath: /api/1.0.0
schemes:
 - https